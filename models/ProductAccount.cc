/**
 *
 *  ProductAccount.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ProductAccount.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::vkr;

const std::string ProductAccount::Cols::_product = "\"product\"";
const std::string ProductAccount::Cols::_account = "\"account\"";
const std::string ProductAccount::Cols::_amount = "\"amount\"";
const std::vector<std::string> ProductAccount::primaryKeyName = {"product","account"};
const bool ProductAccount::hasPrimaryKey = true;
const std::string ProductAccount::tableName = "\"product_account\"";

const std::vector<typename ProductAccount::MetaData> ProductAccount::metaData_={
{"product","int32_t","integer",4,0,1,1},
{"account","int32_t","integer",4,0,1,1},
{"amount","int32_t","integer",4,0,0,1}
};
const std::string &ProductAccount::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
ProductAccount::ProductAccount(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["product"].isNull())
        {
            product_=std::make_shared<int32_t>(r["product"].as<int32_t>());
        }
        if(!r["account"].isNull())
        {
            account_=std::make_shared<int32_t>(r["account"].as<int32_t>());
        }
        if(!r["amount"].isNull())
        {
            amount_=std::make_shared<int32_t>(r["amount"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            product_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            account_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            amount_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

ProductAccount::ProductAccount(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            product_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            account_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            amount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
}

ProductAccount::ProductAccount(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("product"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["product"].isNull())
        {
            product_=std::make_shared<int32_t>((int32_t)pJson["product"].asInt64());
        }
    }
    if(pJson.isMember("account"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["account"].isNull())
        {
            account_=std::make_shared<int32_t>((int32_t)pJson["account"].asInt64());
        }
    }
    if(pJson.isMember("amount"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["amount"].isNull())
        {
            amount_=std::make_shared<int32_t>((int32_t)pJson["amount"].asInt64());
        }
    }
}

void ProductAccount::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            product_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            account_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            amount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
}

void ProductAccount::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("product"))
    {
        if(!pJson["product"].isNull())
        {
            product_=std::make_shared<int32_t>((int32_t)pJson["product"].asInt64());
        }
    }
    if(pJson.isMember("account"))
    {
        if(!pJson["account"].isNull())
        {
            account_=std::make_shared<int32_t>((int32_t)pJson["account"].asInt64());
        }
    }
    if(pJson.isMember("amount"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["amount"].isNull())
        {
            amount_=std::make_shared<int32_t>((int32_t)pJson["amount"].asInt64());
        }
    }
}

const int32_t &ProductAccount::getValueOfProduct() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(product_)
        return *product_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ProductAccount::getProduct() const noexcept
{
    return product_;
}
void ProductAccount::setProduct(const int32_t &pProduct) noexcept
{
    product_ = std::make_shared<int32_t>(pProduct);
    dirtyFlag_[0] = true;
}

const int32_t &ProductAccount::getValueOfAccount() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(account_)
        return *account_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ProductAccount::getAccount() const noexcept
{
    return account_;
}
void ProductAccount::setAccount(const int32_t &pAccount) noexcept
{
    account_ = std::make_shared<int32_t>(pAccount);
    dirtyFlag_[1] = true;
}

const int32_t &ProductAccount::getValueOfAmount() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(amount_)
        return *amount_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ProductAccount::getAmount() const noexcept
{
    return amount_;
}
void ProductAccount::setAmount(const int32_t &pAmount) noexcept
{
    amount_ = std::make_shared<int32_t>(pAmount);
    dirtyFlag_[2] = true;
}

void ProductAccount::updateId(const uint64_t id)
{
}
typename ProductAccount::PrimaryKeyType ProductAccount::getPrimaryKey() const
{
    return std::make_tuple(*product_,*account_);
}

const std::vector<std::string> &ProductAccount::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "product",
        "account",
        "amount"
    };
    return inCols;
}

void ProductAccount::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getProduct())
        {
            binder << getValueOfProduct();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getAccount())
        {
            binder << getValueOfAccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAmount())
        {
            binder << getValueOfAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> ProductAccount::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void ProductAccount::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getProduct())
        {
            binder << getValueOfProduct();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getAccount())
        {
            binder << getValueOfAccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAmount())
        {
            binder << getValueOfAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ProductAccount::toJson() const
{
    Json::Value ret;
    if(getProduct())
    {
        ret["product"]=getValueOfProduct();
    }
    else
    {
        ret["product"]=Json::Value();
    }
    if(getAccount())
    {
        ret["account"]=getValueOfAccount();
    }
    else
    {
        ret["account"]=Json::Value();
    }
    if(getAmount())
    {
        ret["amount"]=getValueOfAmount();
    }
    else
    {
        ret["amount"]=Json::Value();
    }
    return ret;
}

Json::Value ProductAccount::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getProduct())
            {
                ret[pMasqueradingVector[0]]=getValueOfProduct();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getAccount())
            {
                ret[pMasqueradingVector[1]]=getValueOfAccount();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getAmount())
            {
                ret[pMasqueradingVector[2]]=getValueOfAmount();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getProduct())
    {
        ret["product"]=getValueOfProduct();
    }
    else
    {
        ret["product"]=Json::Value();
    }
    if(getAccount())
    {
        ret["account"]=getValueOfAccount();
    }
    else
    {
        ret["account"]=Json::Value();
    }
    if(getAmount())
    {
        ret["amount"]=getValueOfAmount();
    }
    else
    {
        ret["amount"]=Json::Value();
    }
    return ret;
}

bool ProductAccount::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("product"))
    {
        if(!validJsonOfField(0, "product", pJson["product"], err, true))
            return false;
    }
    else
    {
        err="The product column cannot be null";
        return false;
    }
    if(pJson.isMember("account"))
    {
        if(!validJsonOfField(1, "account", pJson["account"], err, true))
            return false;
    }
    else
    {
        err="The account column cannot be null";
        return false;
    }
    if(pJson.isMember("amount"))
    {
        if(!validJsonOfField(2, "amount", pJson["amount"], err, true))
            return false;
    }
    else
    {
        err="The amount column cannot be null";
        return false;
    }
    return true;
}
bool ProductAccount::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ProductAccount::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("product"))
    {
        if(!validJsonOfField(0, "product", pJson["product"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("account"))
    {
        if(!validJsonOfField(1, "account", pJson["account"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("amount"))
    {
        if(!validJsonOfField(2, "amount", pJson["amount"], err, false))
            return false;
    }
    return true;
}
bool ProductAccount::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ProductAccount::validJsonOfField(size_t index,
                                      const std::string &fieldName,
                                      const Json::Value &pJson,
                                      std::string &err,
                                      bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
